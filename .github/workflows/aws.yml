name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push app image to Amazon ECR
        id: build-app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: staging-dedoco-file-share-client
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Fill in the new app image ID in the Amazon ECS task definition
        id: task-def-app
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .ecs/stg-dss-client.json
          container-name: stg-dss-client
          image: ${{ steps.build-app.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-app.outputs.task-definition }}
          service: staging-dss-client
          cluster: dedoco
          wait-for-service-stability: true

  # notify_slack_success:
  #   name: Notify Slack
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: ${{ success() }}
  #   steps:
  #     - uses: 8398a7/action-slack@v3
  #       with:
  #         status: success
  #         fields: repo,message,commit,author,action,eventName,ref,workflow
  #         author_name: Coo.
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # notify_slack_failure:
  #   name: Notify Slack
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: ${{ failure() }}
  #   steps:
  #     - uses: 8398a7/action-slack@v3
  #       with:
  #         status: failure
  #         fields: repo,message,commit,author,action,eventName,ref,workflow
  #         author_name: Coo.
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 